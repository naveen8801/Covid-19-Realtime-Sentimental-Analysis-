[{"F:\\Web development practise\\frontend_sentiments\\src\\index.js":"1","F:\\Web development practise\\frontend_sentiments\\src\\reportWebVitals.js":"2","F:\\Web development practise\\frontend_sentiments\\src\\components\\Navbar\\Navbar.js":"3","F:\\Web development practise\\frontend_sentiments\\src\\pages\\User\\User.js":"4","F:\\Web development practise\\frontend_sentiments\\src\\pages\\Home\\Home.js":"5","F:\\Web development practise\\frontend_sentiments\\src\\pages\\location\\Location.js":"6","F:\\Web development practise\\frontend_sentiments\\src\\components\\tweets\\Tweets.js":"7","F:\\Web development practise\\frontend_sentiments\\src\\api\\index.js":"8","F:\\Web development practise\\frontend_sentiments\\src\\components\\Barchart\\Barchart.js":"9","F:\\Web development practise\\frontend_sentiments\\src\\components\\Piechart\\Piechart.js":"10","F:\\Web development practise\\frontend_sentiments\\src\\components\\wordcloud\\Wordcloud.js":"11","F:\\Web development practise\\frontend_sentiments\\src\\components\\Form_user\\Form_user.js":"12"},{"size":1014,"mtime":1612206527906,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":864,"mtime":1612792439711,"results":"16","hashOfConfig":"14"},{"size":5641,"mtime":1612440362295,"results":"17","hashOfConfig":"14"},{"size":2613,"mtime":1612794250011,"results":"18","hashOfConfig":"14"},{"size":159,"mtime":1612203807018,"results":"19","hashOfConfig":"14"},{"size":1118,"mtime":1612242221655,"results":"20","hashOfConfig":"14"},{"size":362,"mtime":1612796179154,"results":"21","hashOfConfig":"14"},{"size":1793,"mtime":1612375967358,"results":"22","hashOfConfig":"14"},{"size":1877,"mtime":1612285913195,"results":"23","hashOfConfig":"14"},{"size":1644,"mtime":1612376702362,"results":"24","hashOfConfig":"14"},{"size":1025,"mtime":1612434800377,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"17twd67",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"F:\\Web development practise\\frontend_sentiments\\src\\index.js",["59"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Home from './pages/Home/Home';\nimport User from './pages/User/User';\nimport Location from './pages/location/Location';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Navbar />\n      <Switch>\n        <Route path=\"/location_analysis\">\n          <Location />\n        </Route>\n        <Route path=\"/user_analysis\">\n          <User />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["60","61"],"F:\\Web development practise\\frontend_sentiments\\src\\reportWebVitals.js",[],"F:\\Web development practise\\frontend_sentiments\\src\\components\\Navbar\\Navbar.js",[],"F:\\Web development practise\\frontend_sentiments\\src\\pages\\User\\User.js",["62","63","64"],"import React, { useState, useEffect } from 'react';\r\nimport Form_user from '../../components/Form_user/Form_user';\r\nimport styles from './user.module.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getuserTweets } from '../../api';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport Tweets from '../../components/tweets/Tweets';\r\n\r\nfunction User() {\r\n  const [sumbitState, setSumbitState] = useState(false);\r\n  const [chartData, setchartdata] = useState({});\r\n  const [frequentwordsData, setfrequentData] = useState([]);\r\n  const [tweetlist,settweetlist] = useState([])\r\n  const [nameSeacrhing,setname] = useState(\"\")\r\n\r\n  const sumbitted = async (input) => {\r\n    setSumbitState(true);\r\n    const data = await getuserTweets(input);\r\n    const main_data = data.data;\r\n    const frequent_words = main_data[main_data.length - 1];\r\n    let positive_tweets = 0;\r\n    let negative_tweets = 0;\r\n    let neutral_tweets = 0;\r\n    const only_tweet_list = []\r\n    let i = 0;\r\n    for (i = 0; i < main_data.length - 1; i++) {\r\n      only_tweet_list.push(main_data[i])\r\n      if (main_data[i].sentiment === 'Positive') {\r\n        positive_tweets += 1;\r\n      } else if (main_data[i].sentiment === 'Negative') {\r\n        negative_tweets += 1;\r\n      } else if (main_data[i].sentiment === 'Neutral') {\r\n        neutral_tweets += 1;\r\n      }\r\n    }\r\n    const data_for_chart = {\r\n      labels: ['Positive', 'Negative', 'Neutral'],\r\n      datasets: [\r\n        {\r\n          label: ' No. Of Different Tweets',\r\n          data: [positive_tweets, negative_tweets, neutral_tweets],\r\n          backgroundColor: ['#845ec2', '#ffc75f', '#ff5e78'],\r\n          borderColor: [\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)',\r\n            'rgba(153, 102, 255, 1)',\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    let list_labels = [];\r\n    let data_ = [];\r\n    for (var j = 0; j < frequent_words.length; j++) {\r\n      list_labels.push(frequent_words[j].text);\r\n    }\r\n    for (var j = 0; j < frequent_words.length; j++) {\r\n      data_.push(frequent_words[j].value);\r\n    }\r\n    const temp = {\r\n      labels: list_labels,\r\n      datasets: [\r\n        {\r\n          label: 'Most Frequent Words',\r\n          data: data_,\r\n          backgroundColor: [\r\n            '#214151',\r\n            '#55b3b1',\r\n            '#f6c065',\r\n            '#f58634',\r\n            '#19456b',\r\n            '#6930c3',\r\n            '#2c061f',\r\n            '#312c51',\r\n            '#222831',\r\n            '#75cfb8',\r\n            '#00af91',\r\n            '#2c061f',\r\n            '#f05454',\r\n            '#654062',\r\n            '#ffd66b',\r\n            '#83a95c',\r\n            '#ff4646',\r\n            '#65d6ce',\r\n            '#0e49b5',\r\n            '#54e346',\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    setchartdata(data_for_chart);\r\n    setfrequentData(temp);\r\n    settweetlist(only_tweet_list)\r\n    setname(input)\r\n    setSumbitState(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.user_conatiner}>\r\n      <div className={styles.home_text_content}>\r\n        <p className={styles.sub_text}>\r\n          Welcome ,\r\n          <strong>\r\n            'COVID-19 Sentimental Analysis Of Twitter Social Handle '\r\n          </strong>\r\n          through this page you can easily perform analysis of particular\r\n          twitter handle by inputing username of user\r\n        </p>\r\n        <Form_user sumbitted={sumbitted} />\r\n      </div>\r\n      <hr className={styles.hr_liner}></hr>\r\n      <div className={styles.main_content}>\r\n        {!sumbitState ? (\r\n          <div>\r\n            <div className={styles.chart}>\r\n              <Pie\r\n                data={chartData}\r\n                height={300}\r\n                width={400}\r\n                options={{\r\n                  maintainAspectRatio: false,\r\n                  scales: {\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          beginAtZero: true,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className={styles.chart}>\r\n              <Bar\r\n                data={chartData}\r\n                height={300}\r\n                width={400}\r\n                options={{\r\n                  maintainAspectRatio: false,\r\n                  scales: {\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          beginAtZero: true,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div className={styles.chart_}>\r\n              <Bar\r\n                data={frequentwordsData}\r\n                height={300}\r\n                width={400}\r\n                options={{\r\n                  maintainAspectRatio: false,\r\n                  scales: {\r\n                    yAxes: [\r\n                      {\r\n                        ticks: {\r\n                          beginAtZero: true,\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                }}\r\n              />\r\n            </div>\r\n            <div><h2 className={styles.heading}>Latest Tweets</h2>{tweetlist.map((tweet)=>{\r\n              return <Tweets name={nameSeacrhing} text={tweet.text} polarity={tweet.polarity}/>\r\n            })}</div>\r\n          </div>\r\n        ) : (\r\n          <CircularProgress />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","F:\\Web development practise\\frontend_sentiments\\src\\pages\\Home\\Home.js",["65","66","67","68"],"import React, { useState, useEffect } from 'react';\r\n  import { tweetsStream ,startStream} from '../../api';\r\nimport Navbar from '../../components/Navbar/Navbar';\r\nimport Tweets from '../../components/tweets/Tweets';\r\nimport styles from './home.module.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Barchart from '../../components/Barchart/Barchart';\r\nimport Piechart from '../../components/Piechart/Piechart';\r\nimport Wordcloud from '../../components/wordcloud/Wordcloud';\r\n\r\nfunction Home() {\r\n  const [tweets, settweets] = useState([]);\r\n  const [counter, setCounter] = useState();\r\n  const [loader, setLoader] = useState(true);\r\n  const [printtweetlist , setprintTweetList] = useState([])\r\n\r\n  useEffect(async () => {\r\n      const start = await startStream()\r\n      \r\n  }, [])\r\n\r\n\r\n  const getTweetsStream = async () => {\r\n    const stream = await tweetsStream();\r\n    settweets(stream.data);\r\n    const temp = tweets.reverse()\r\n    setprintTweetList(temp)\r\n    setLoader(false)    \r\n  };\r\n\r\n  useEffect(() => {\r\n    getTweetsStream();\r\n    setCounter(tweets.length);\r\n  }, [tweets, counter]);\r\n\r\n  console.log(tweets);\r\n  return (\r\n    <div className={styles.home_container}>\r\n      <div className={styles.home_text_content}>\r\n        <p className={styles.sub_text}>\r\n          Welcome , This is\r\n          <strong>\r\n            'COVID-19 Sentimental Analysis Of Twitter Social Handle '\r\n          </strong>\r\n          through this dashboard you can easily analysis twitter tweets with\r\n          their sentiments. Below here is live streaming of latest trending\r\n          tweets .\r\n        </p>\r\n      </div>\r\n      <hr className={styles.hr_liner}></hr>\r\n      <div className={styles.home_main_content}>\r\n        <div className={styles.visulaisation_div}>\r\n          {loader ? <CircularProgress color=\"secondary\" /> : (<div><Piechart/><Barchart/><Wordcloud/></div>)}\r\n          \r\n        </div>\r\n        {loader ? (\r\n          <CircularProgress color=\"secondary\" />\r\n        ) : (\r\n          <div className={styles.tweets_show_div}>\r\n            <div className={styles.counter_div} id=\"tweet_div\">\r\n              <h3>\r\n                Tweets : <strong>{counter}</strong>\r\n              </h3>\r\n            </div>\r\n            {printtweetlist.map((tweet) => {\r\n              return (\r\n                <Tweets\r\n                  name={tweet.name}\r\n                  polarity={tweet.polarity}\r\n                  text={tweet.text}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","F:\\Web development practise\\frontend_sentiments\\src\\pages\\location\\Location.js",["69"],"import React from 'react';\r\nimport styles from './location.module.css'\r\n\r\nfunction Location() {\r\n  return <div>LOCATION</div>;\r\n}\r\n\r\nexport default Location;\r\n","F:\\Web development practise\\frontend_sentiments\\src\\components\\tweets\\Tweets.js",["70","71"],"import { StylesProvider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport styles from './tweets.module.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\n\r\nfunction Tweets(props) {\r\n    let sentiment = <h1></h1>\r\n  if (props.polarity === 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_neutral}>\r\n        <h3>Neutral</h3>\r\n      </div>\r\n    );\r\n  } else if (props.polarity > 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_positive}>\r\n        <h3>Positive</h3>\r\n      </div>\r\n    );\r\n  } else if (props.polarity < 0) {\r\n    sentiment = (\r\n      <div className={styles.setiment_negative}>\r\n        <h3>Negative</h3>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={styles.tweets_container}>\r\n      <div className={styles.name_logo}>\r\n        <TwitterIcon className={styles.twitter_icon} />\r\n        <h4 className={styles.name}>\r\n          <strong>{props.name}</strong>\r\n        </h4>\r\n      </div>\r\n\r\n      <div className={styles.tweet_body}>\r\n        <p>{props.text}</p>\r\n      </div>\r\n      {sentiment}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tweets;\r\n","F:\\Web development practise\\frontend_sentiments\\src\\api\\index.js",[],"F:\\Web development practise\\frontend_sentiments\\src\\components\\Barchart\\Barchart.js",["72","73"],"import { StylesProvider } from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { tweetsStream } from '../../api/index';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport styles from './barchat.module.css';\r\n\r\nfunction Barchart() {\r\n  const [chartdata, setchartdata] = useState({});\r\n\r\n  useEffect(() => {\r\n    getTweetsStream();\r\n  }, [chartdata]);\r\n\r\n  const getTweetsStream = async () => {\r\n    const stream = await tweetsStream();\r\n    const data = stream.data;\r\n    let positive_tweets = 0;\r\n    let negative_tweets = 0;\r\n    let neutral_tweets = 0;\r\n    data.map((item) => {\r\n      if (item.sentiment === 'Positive') {\r\n        positive_tweets += 1;\r\n      } else if (item.sentiment === 'Negative') {\r\n        negative_tweets += 1;\r\n      } else {\r\n        neutral_tweets += 1;\r\n      }\r\n    });\r\n\r\n    const temp = {\r\n      labels: ['Positive', 'Negative', 'Neutral'],\r\n      datasets: [\r\n        {\r\n          label: ' No. Of Different Tweets',\r\n          data: [positive_tweets, negative_tweets, neutral_tweets],\r\n          backgroundColor: ['#845ec2', '#ffc75f', '#ff5e78'],\r\n          borderColor: [\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)',\r\n            'rgba(153, 102, 255, 1)',\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    setchartdata(temp);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.chart}>\r\n      <Bar\r\n        data={chartdata}\r\n        height={300}\r\n        width={400}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n         }}\r\n      />\r\n    </div> \r\n    \r\n  );\r\n}\r\n\r\nexport default Barchart;\r\n","F:\\Web development practise\\frontend_sentiments\\src\\components\\Piechart\\Piechart.js",["74"],"import React, { useState, useEffect } from 'react';\r\nimport { tweetsStream } from '../../api/index';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport styles from './piechart.module.css'\r\n\r\nfunction Piechart() {\r\n\r\n    const [chartdata, setchartdata] = useState({});\r\n\r\n    useEffect(() => {\r\n      getTweetsStream();\r\n    }, [chartdata]);\r\n\r\n    const getTweetsStream = async () => {\r\n      const stream = await tweetsStream();\r\n      const data = stream.data;\r\n      let positive_tweets = 0;\r\n      let negative_tweets = 0;\r\n      let neutral_tweets = 0;\r\n      data.map((item) => {\r\n        if (item.sentiment === 'Positive') {\r\n          positive_tweets += 1;\r\n        } else if (item.sentiment === 'Negative') {\r\n          negative_tweets += 1;\r\n        } else {\r\n          neutral_tweets += 1;\r\n        }\r\n      });\r\n\r\n      const temp = {\r\n        labels: ['Positive', 'Negative', 'Neutral'],\r\n        datasets: [\r\n          {\r\n            label: ' No. Of Different Tweets',\r\n            data: [positive_tweets, negative_tweets, neutral_tweets],\r\n            backgroundColor: ['#845ec2', '#ffc75f', '#ff5e78'],\r\n            borderColor: [\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n      setchartdata(temp);\r\n      console.log(temp);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n      <div className={styles.chart}>\r\n        <Pie\r\n          data={chartdata}\r\n          height={300}\r\n          width={400}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Piechart\r\n","F:\\Web development practise\\frontend_sentiments\\src\\components\\wordcloud\\Wordcloud.js",["75"],"import React , {useState,useEffect} from 'react';\r\nimport styles from './wordcloud.module.css';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {frequentwords} from '../../api'\r\n\r\nfunction Wordcloud() {\r\n    const [data, setdata] = useState([])\r\n\r\n    useEffect(() => {\r\n        getdata()\r\n    }, [data])\r\n\r\n    const getdata = async() =>{\r\n        const status = await frequentwords();\r\n        const list  = status.data\r\n        let list_labels = []\r\n        let data_ = []\r\n        for(var i =0 ;i<list.length;i++){\r\n            list_labels.push(list[i].text)\r\n        }\r\n        for (var i = 0; i < list.length; i++) {\r\n          data_.push(list[i].value);\r\n        }\r\n        const temp = {\r\n          labels: list_labels,\r\n          datasets: [\r\n            {\r\n              label: 'Most Frequent Words',\r\n              data: data_,\r\n              backgroundColor: ['#214151', '#55b3b1', '#f6c065', '#f58634','#19456b','#6930c3','#2c061f','#312c51','#222831','#75cfb8','#00af91','#2c061f','#f05454','#654062','#ffd66b','#83a95c','#ff4646','#65d6ce','#0e49b5','#54e346'],\r\n            },\r\n          ],\r\n        };\r\n        setdata(temp)\r\n    }\r\n    \r\n    return (\r\n      <div className={styles.chart}>\r\n        <Bar\r\n          data={data}\r\n          height={300}\r\n          width={400}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Wordcloud\r\n","F:\\Web development practise\\frontend_sentiments\\src\\components\\Form_user\\Form_user.js",[],{"ruleId":"76","severity":1,"message":"77","line":4,"column":25,"nodeType":"78","messageId":"79","endLine":4,"endColumn":29},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"76","severity":1,"message":"84","line":1,"column":27,"nodeType":"78","messageId":"79","endLine":1,"endColumn":36},{"ruleId":"85","severity":1,"message":"86","line":58,"column":14,"nodeType":"78","messageId":"87","endLine":58,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":111,"column":9,"nodeType":"90","endLine":111,"endColumn":44},{"ruleId":"76","severity":1,"message":"91","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":17,"column":13,"nodeType":"94","endLine":20,"endColumn":4},{"ruleId":"76","severity":1,"message":"95","line":18,"column":13,"nodeType":"78","messageId":"79","endLine":18,"endColumn":18},{"ruleId":"92","severity":1,"message":"96","line":34,"column":6,"nodeType":"97","endLine":34,"endColumn":23,"suggestions":"98"},{"ruleId":"76","severity":1,"message":"99","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"100","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":7,"column":21,"nodeType":"90","endLine":7,"endColumn":25},{"ruleId":"76","severity":1,"message":"100","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"104","line":20,"column":21,"nodeType":"94","messageId":"105","endLine":20,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":20,"column":23,"nodeType":"94","messageId":"105","endLine":20,"endColumn":25},{"ruleId":"85","severity":1,"message":"106","line":21,"column":18,"nodeType":"78","messageId":"87","endLine":21,"endColumn":19},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["107"],"no-negated-in-lhs",["108"],"'useEffect' is defined but never used.","no-redeclare","'j' is already defined.","redeclared","react/jsx-pascal-case","Imported JSX component Form_user must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Navbar' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'start' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTweetsStream'. Either include it or remove the dependency array.","ArrayExpression",["109"],"'styles' is defined but never used.","'StylesProvider' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'i' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},"Update the dependencies array to be: [tweets, counter, getTweetsStream]",{"range":"112","text":"113"},[1113,1130],"[tweets, counter, getTweetsStream]"]